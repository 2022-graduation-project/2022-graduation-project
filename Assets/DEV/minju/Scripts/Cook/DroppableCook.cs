using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class DroppableCook : MonoBehaviour, IPointerEnterHandler, IDropHandler, IPointerExitHandler
{
	private Image image;
	private RectTransform rect;

	private int numSlot = -1;
	private Image icon;
	private Image[] icons;
	private string icon_name;
	public Cooking cook;

	private void Awake()
	{
		image = GetComponent<Image>();
		rect = GetComponent<RectTransform>();
	}

	/// <summary>
	/// 마우스 포인트가 현재 아이템 슬롯 영역 내부로 들어갈 때 1회 호출
	/// </summary>
	public void OnPointerEnter(PointerEventData eventData)
	{
		// 아이템 슬롯의 색상을 노란색으로 변경
		image.color = Color.yellow;
	}

	/// <summary>
	/// 마우스 포인트가 현재 아이템 슬롯 영역을 빠져나갈 때 1회 호출
	/// </summary>
	public void OnPointerExit(PointerEventData eventData)
	{
		// 아이템 슬롯의 색상을 하얀색으로 변경
		image.color = Color.white;
	}

	/// <summary>
	/// 현재 아이템 슬롯 영역 내부에서 드롭을 했을 때 1회 호출
	/// </summary>
	public void OnDrop(PointerEventData eventData)
	{
		// pointerDrag는 현재 드래그하고 있는 대상(=아이템)
		if (eventData.pointerDrag != null)
		{
			// 드래그하고 있는 대상의 부모를 현재 오브젝트로 설정하고, 위치를 현재 오브젝트 위치와 동일하게 설정
			eventData.pointerDrag.transform.SetParent(transform);
			eventData.pointerDrag.GetComponent<RectTransform>().position = rect.position;
		}

		switch (gameObject.name)
		{
			case "ItemSlot":
				numSlot = 1;
				break;
			case "ItemSlot (1)":
				numSlot = 2;
				break;
		}

        // 드래그 된 아이템 이미지
        icons = gameObject.GetComponentsInChildren<Image>();
        icon = icons[icons.Length - 1];
		icon_name = icon.gameObject.GetComponent<DraggableItem>().slot.itemData.image_name;

		sendItem();
	}

	public void sendItem()
    {
        switch (numSlot)
        {
			case 1:
				cook.setFirstItem(icon_name);
				break;
			case 2:
				cook.setSecondItem(icon_name);
				break;
        }
		cook.ItemOn();
	}
}

